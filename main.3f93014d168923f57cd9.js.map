{"version":3,"sources":["webpack:///./js/task-1.js","webpack:///./js/task-2.js","webpack:///./js/task-3.js"],"names":["delay","ms","time","Promise","resolve","setTimeout","logger","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":"2JAOMA,EAAQ,SAAAC,GACV,IAAMC,EAAOD,EAMb,OALgB,IAAIE,SAAQ,SAAAC,GACxBC,YAAW,WACPD,EAAQF,KACTD,OAgBLK,EAAS,SAAAJ,GAAI,OAAIK,QAAQC,IAAR,kBAA8BN,EAA9B,OAGvBF,EAAM,KAAMS,KAAKH,GACjBN,EAAM,KAAMS,KAAKH,GACjBN,EAAM,MAAMS,KAAKH,G,kCC7BXI,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GAC/B,OAAO,IAAIZ,SAAQ,SAAAC,GAEfA,EADqBU,EAASE,KAAI,SAAAC,GAAI,OAAIA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAWzGX,EAAS,SAAAY,GAAY,OAAIX,QAAQY,MAAMD,IAE7CL,EAAgBH,EAAO,SAASD,KAAKH,GACrCO,EAAgBH,EAAO,OAAOD,KAAKH,GCrBnC,IAIMc,EAAkB,SAAAC,GACpB,IAL+BC,EAAKC,EAK9BvB,GALyBsB,EAKS,IALJC,EAKS,IAJxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAMlD,OAAO,IAAInB,SAAQ,SAACC,EAASuB,GACzBtB,YAAW,WACYmB,KAAKE,SAAW,IAElBtB,EAAQiB,EAAYO,GAAI5B,GACxB2B,EAAON,EAAYO,MACrC5B,OAIL6B,EAAa,SAAED,EAAI1B,GACvBK,QAAQC,IAAR,eAA2BoB,EAA3B,iBAA8C1B,EAA9C,OAGI4B,EAAW,SAAAF,GACfrB,QAAQwB,KAAR,gCAA6CH,EAA7C,8BAIFR,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,KAC/BvB,KAAKoB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,K","file":"main.3f93014d168923f57cd9.js","sourcesContent":["// Напиши функцию delay(ms), которая возвращает промис,\r\n// переходящий в состояние \"resolved\" через ms миллисекунд.\r\n// Значением исполнившегося промиса должно быть то кол - во\r\n// миллисекунд которое передали во время вызова функции delay.\r\n\r\n//вариант 1\r\n\r\nconst delay = ms => {\r\n    const time = ms;\r\n    const promise = new Promise(resolve => {\r\n        setTimeout(() => {\r\n            resolve(time)\r\n        }, ms);\r\n    });\r\n    return promise;\r\n};\r\n// вариант 2\r\n\r\n// const delay = ms => {\r\n    \r\n//     return new Promise(resolve =>{\r\n//         setTimeout(() => {\r\n//             resolve(ms);\r\n//         }, ms);\r\n//     });\r\n    \r\n// };\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms","// Перепиши функцию toggleUserState() так,\r\n// чтобы она не использовала callback - функцию callback,\r\n// а принимала всего два параметра allUsers и userName и возвращала промис.\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n//1 вариант\r\nconst toggleUserState = (allUsers, userName) => {\r\n    return new Promise(resolve => {\r\n        const updatedUsers = allUsers.map(user => user.name === userName ? { ...user, active: !user.active } : user);\r\n        resolve(updatedUsers);\r\n    })\r\n };\r\n//2 вариант\r\n//  const toggleUserState = (allUsers, userName) => {\r\n//     const updatedUsers = allUsers.map(user =>\r\n//         user.name === userName ? { ...user, active: !user.active } : user,\r\n//     );\r\n  //     return new Promise(resolve => resolve(updatedUsers))\r\n// };\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);","// Перепиши функцию makeTransaction() так,\r\n// чтобы она не использовала callback - функции onSuccess и onError,\r\n// а принимала всего один параметр transaction и возвращала промис.\r\n\r\n\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n            const canProcess = Math.random() > 0.3;\r\n\r\n            if (canProcess) {resolve(transaction.id, delay );            } \r\n                             reject(transaction.id);\r\n        }, delay);\r\n    })\r\n};\r\n\r\nconst logSuccess = ( id, time ) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\n"],"sourceRoot":""}